---
import Layout from '../layouts/Layout.astro';
import { createUrl } from '../utils/url';
import { getEntry } from 'astro:content';

// Pobierz pytania testowe z content collections
const testData = await getEntry('testy', 'test-koncowy');

if (!testData) {
  throw new Error('Nie można załadować danych testowych. Sprawdź czy plik test-koncowy.json istnieje w folderze src/content/testy/');
}

const allQuestions = testData.data.questions;

// Przekaż pytania do frontendu
const questionsJson = JSON.stringify(allQuestions);
---

<Layout title="Test końcowy - AI dla Zielonych" description="Sprawdź swoją wiedzę o sztucznej inteligencji i otrzymaj certyfikat ukończenia kursu.">
  <div class="max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 py-12">
    <!-- Header -->
    <div class="text-center mb-12">
      <h1 class="text-4xl font-bold text-gray-900 mb-4">
        📝 Test końcowy
      </h1>
      <p class="text-xl text-gray-600 max-w-2xl mx-auto">
        Sprawdź swoją wiedzę z kursu "AI dla Zielonych". Aby otrzymać certyfikat, musisz udzielić wszystkich poprawnych odpowiedzi (100%).
      </p>
    </div>

    <!-- Info panel -->
    <div class="bg-blue-50 border border-blue-200 rounded-lg p-6 mb-8">
      <div class="flex items-start space-x-3">
        <span class="text-2xl">ℹ️</span>
        <div>
          <h2 class="font-semibold text-blue-800 mb-2">Informacje o teście</h2>
          <ul class="text-blue-700 text-sm space-y-1">
            <li>• Test składa się z 20 losowych pytań</li>
            <li>• Do zaliczenia wymagane jest 100% poprawnych odpowiedzi</li>
            <li>• Możesz podejść do testu wielokrotnie</li>
            <li>• Wynik zostanie pokazany natychmiast po zakończeniu</li>
            <li>• Po zaliczeniu będziesz mógł pobrać certyfikat</li>
          </ul>
        </div>
      </div>
    </div>

    <!-- Test container -->
    <div id="test-container" class="bg-white rounded-lg shadow-lg border border-gray-200 p-8">
      <div id="test-form">
        <div id="questions-container">
          <!-- Pytania będą wygenerowane przez JavaScript -->
        </div>
        
        <div class="mt-8 text-center">
          <button 
            id="submit-test" 
            class="bg-gradient-to-r from-emerald-600 to-teal-600 text-white px-8 py-4 rounded-lg font-semibold text-lg hover:from-emerald-700 hover:to-teal-700 transform hover:scale-105 transition-all duration-200 shadow-lg disabled:opacity-50 disabled:cursor-not-allowed disabled:transform-none"
            disabled
          >
            Zakończ test
          </button>
        </div>
      </div>

      <!-- Results -->
      <div id="test-results" class="hidden">
        <div id="success-result" class="text-center hidden">
          <div class="mb-6">
            <div class="w-24 h-24 bg-green-100 rounded-full mx-auto mb-4 flex items-center justify-center">
              <span class="text-4xl">🎉</span>
            </div>
            <h2 class="text-3xl font-bold text-green-600 mb-2">Gratulacje!</h2>
            <p class="text-xl text-gray-700 mb-6">
              Uzyskałeś <span class="font-bold text-green-600"><span id="success-percentage"></span>%</span> poprawnych odpowiedzi!
            </p>
          </div>
          
          <!-- Certificate form -->
          <div class="bg-green-50 border border-green-200 rounded-lg p-6 mb-6">
            <h3 class="text-lg font-semibold text-green-800 mb-4">Pobierz swój certyfikat</h3>
            <div class="max-w-md mx-auto">
              <input 
                type="text" 
                id="certificate-name" 
                placeholder="Wprowadź swoje imię i nazwisko"
                class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-green-500 focus:border-green-500 mb-4"
                required
              >
              <button 
                id="generate-certificate"
                class="w-full bg-green-600 text-white px-6 py-3 rounded-lg font-semibold hover:bg-green-700 transition-colors duration-200"
              >
                🏆 Wygeneruj certyfikat
              </button>
            </div>
          </div>
          
          <button 
            id="retake-test" 
            class="bg-gray-200 text-gray-700 px-6 py-3 rounded-lg font-semibold hover:bg-gray-300 transition-colors duration-200"
          >
            Powtórz test
          </button>
        </div>

        <div id="fail-result" class="text-center hidden">
          <div class="mb-6">
            <div class="w-24 h-24 bg-red-100 rounded-full mx-auto mb-4 flex items-center justify-center">
              <span class="text-4xl">😔</span>
            </div>
            <h2 class="text-3xl font-bold text-red-600 mb-2">Nie udało się tym razem</h2>
            <p class="text-xl text-gray-700 mb-2">
              Uzyskałeś <span id="score-percentage" class="font-bold text-red-600"></span> poprawnych odpowiedzi.
            </p>
            <p class="text-gray-600 mb-6">
              Do otrzymania certyfikatu potrzebujesz 100% poprawnych odpowiedzi.
            </p>
          </div>
          
          <div class="space-y-4">
            <button 
              id="retake-test-fail" 
              class="bg-gradient-to-r from-emerald-600 to-teal-600 text-white px-8 py-4 rounded-lg font-semibold text-lg hover:from-emerald-700 hover:to-teal-700 transform hover:scale-105 transition-all duration-200 shadow-lg"
            >
              🔄 Spróbuj ponownie
            </button>
            <br>
            <a 
              href={createUrl("/lekcje")}
              class="inline-block bg-gray-200 text-gray-700 px-6 py-3 rounded-lg font-semibold hover:bg-gray-300 transition-colors duration-200"
            >
              📚 Wróć do lekcji
            </a>
          </div>
        </div>
      </div>
    </div>
  </div>

  <script define:vars={{ questionsJson }}>
    // Pytania przekazane z serwera
    const allQuestions = JSON.parse(questionsJson);
    
    // Funkcja do tasowania tablicy (Fisher-Yates shuffle)
    function shuffleArray(array) {
      const shuffled = [...array];
      for (let i = shuffled.length - 1; i > 0; i--) {
        const j = Math.floor(Math.random() * (i + 1));
        [shuffled[i], shuffled[j]] = [shuffled[j], shuffled[i]];
      }
      return shuffled;
    }
    
    // Funkcja do przygotowania pytań - losowych 20 z dostępnych
    function selectRandomQuestions() {
      const shuffled = shuffleArray(allQuestions);
      return shuffled.slice(0, 20);
    }
    
    let currentQuestions = [];
    let currentAnswers = {};
    let lastTestScore = 0;
    
    function initializeTest() {
      const container = document.getElementById('questions-container');
      const submitBtn = document.getElementById('submit-test');
      
      if (!container || !submitBtn) return;
      
      // Wybierz losowe 10 pytań z dostępnych
      currentQuestions = selectRandomQuestions();
      renderQuestions();
    }
    
    function renderQuestions() {
      const container = document.getElementById('questions-container');
      const submitBtn = document.getElementById('submit-test');
      
      if (!container || !submitBtn) return;
      
      container.innerHTML = '';
      currentAnswers = {};
      
      currentQuestions.forEach((q, index) => {
        const questionDiv = document.createElement('div');
        questionDiv.className = 'mb-8 p-6 border border-gray-200 rounded-lg';
        
        questionDiv.innerHTML = `
          <h3 class="text-lg font-semibold text-gray-900 mb-4">
            ${index + 1}. ${q.question}
          </h3>
          <div class="space-y-3">
            ${q.options.map((option, optIndex) => `
              <label class="flex items-center space-x-3 p-3 rounded-lg hover:bg-gray-50 cursor-pointer transition-colors">
                <input 
                  type="radio" 
                  name="question-${index}" 
                  value="${optIndex}"
                  class="w-4 h-4 text-emerald-600 focus:ring-emerald-500 border-gray-300"
                >
                <span class="text-gray-700">${option}</span>
              </label>
            `).join('')}
          </div>
        `;
        
        container.appendChild(questionDiv);
      });
      
      // Nasłuchuj zmian w odpowiedziach
      container.addEventListener('change', (e) => {
        const target = e.target;
        if (target && target.type === 'radio') {
          const questionIndex = parseInt(target.name.split('-')[1]);
          currentAnswers[questionIndex] = parseInt(target.value);
          
          // Sprawdź czy wszystkie pytania zostały odpowiedziane
          if (Object.keys(currentAnswers).length === currentQuestions.length) {
            submitBtn.disabled = false;
          }
        }
      });
      
      submitBtn.disabled = true;
    }
    
    function showResults() {
      let correctCount = 0;
      
      currentQuestions.forEach((q, index) => {
        if (currentAnswers[index] === q.correct) {
          correctCount++;
        }
      });
      
      const percentage = Math.round((correctCount / currentQuestions.length) * 100);
      lastTestScore = percentage;
      
      const testForm = document.getElementById('test-form');
      const testResults = document.getElementById('test-results');
      
      if (!testForm || !testResults) return;
      
      testForm.classList.add('hidden');
      testResults.classList.remove('hidden');
      
      const successResult = document.getElementById('success-result');
      const failResult = document.getElementById('fail-result');
      
      if (!successResult || !failResult) return;
      
      if (percentage >= 100) {
        successResult.classList.remove('hidden');
        failResult.classList.add('hidden');
        const successPercentageElement = document.getElementById('success-percentage');
        if (successPercentageElement) {
          successPercentageElement.textContent = percentage.toString();
        }
      } else {
        successResult.classList.add('hidden');
        failResult.classList.remove('hidden');
        const scoreElement = document.getElementById('score-percentage');
        if (scoreElement) {
          scoreElement.textContent = `${percentage}%`;
        }
      }
    }
    
    function resetTest() {
      const testForm = document.getElementById('test-form');
      const testResults = document.getElementById('test-results');
      const certificateName = document.getElementById('certificate-name');
      
      if (!testForm || !testResults) return;
      
      testForm.classList.remove('hidden');
      testResults.classList.add('hidden');
      
      if (certificateName) {
        certificateName.value = '';
      }
      
      initializeTest();
    }
    
    /**
     * Generates a modern, professional certificate using Canvas API
     * @param {string} name - The recipient's name to display on the certificate
     */
    function generateCertificate() {
      const nameInput = document.getElementById('certificate-name');
      
      if (!nameInput) return;
      
      const name = nameInput.value.trim();
      
      if (!name) {
        alert('Proszę wprowadzić imię i nazwisko');
        return;
      }
      
      const canvas = document.createElement('canvas');
      const ctx = canvas.getContext('2d');
      
      if (!ctx) return;
      
      canvas.width = 1400;
      canvas.height = 1000;
      
      // Modern gradient background with subtle geometric pattern
      const bgGradient = ctx.createLinearGradient(0, 0, 1400, 1000);
      bgGradient.addColorStop(0, '#ffffff');
      bgGradient.addColorStop(0.3, '#f8fafc');
      bgGradient.addColorStop(0.7, '#f1f5f9');
      bgGradient.addColorStop(1, '#e2e8f0');
      ctx.fillStyle = bgGradient;
      ctx.fillRect(0, 0, 1400, 1000);
      
      // Subtle geometric background pattern
      ctx.globalAlpha = 0.05;
      ctx.strokeStyle = '#059669';
      ctx.lineWidth = 1;
      
      for (let x = 100; x < 1300; x += 80) {
        for (let y = 100; y < 900; y += 80) {
          ctx.beginPath();
          ctx.arc(x, y, 20, 0, 2 * Math.PI);
          ctx.stroke();
        }
      }
      ctx.globalAlpha = 1;
      
      // Main border with rounded corners
      const borderRadius = 20;
      const padding = 50;
      
      const borderGradient = ctx.createLinearGradient(0, 0, 1400, 0);
      borderGradient.addColorStop(0, '#059669');
      borderGradient.addColorStop(0.5, '#10b981');
      borderGradient.addColorStop(1, '#34d399');
      
      ctx.strokeStyle = borderGradient;
      ctx.lineWidth = 6;
      ctx.beginPath();
      ctx.roundRect(padding, padding, 1400 - (padding * 2), 1000 - (padding * 2), borderRadius);
      ctx.stroke();
      
      // Inner decorative border
      ctx.strokeStyle = '#d1fae5';
      ctx.lineWidth = 2;
      ctx.beginPath();
      ctx.roundRect(padding + 15, padding + 15, 1400 - (padding * 2) - 30, 1000 - (padding * 2) - 30, borderRadius - 5);
      ctx.stroke();
      

      
      // Main "CERTYFIKAT" header
      ctx.fillStyle = '#1f2937';
      ctx.font = 'bold 84px Arial';
      ctx.textAlign = 'center';
      ctx.textBaseline = 'alphabetic';
      ctx.fillText('CERTYFIKAT', 700, 310);
      
      // Decorative line under header
      const lineGradient = ctx.createLinearGradient(425, 335, 975, 335);
      lineGradient.addColorStop(0, 'transparent');
      lineGradient.addColorStop(0.1, '#10b981');
      lineGradient.addColorStop(0.9, '#10b981');
      lineGradient.addColorStop(1, 'transparent');
      ctx.strokeStyle = lineGradient;
      ctx.lineWidth = 3;
      ctx.beginPath();
      ctx.moveTo(425, 335);
      ctx.lineTo(975, 335);
      ctx.stroke();
      
      // Subtitle
      ctx.fillStyle = '#059669';
      ctx.font = 'bold 47px Arial';
      ctx.fillText('UKOŃCZENIA KURSU', 700, 385);
      
      // Course name with gradient effect
      ctx.save();
      const titleGradient = ctx.createLinearGradient(0, 425, 0, 485);
      titleGradient.addColorStop(0, '#065f46');
      titleGradient.addColorStop(1, '#059669');
      ctx.fillStyle = titleGradient;
      ctx.font = 'bold 62px Arial';
      
      ctx.shadowColor = 'rgba(0, 0, 0, 0.2)';
      ctx.shadowBlur = 4;
      ctx.shadowOffsetX = 2;
      ctx.shadowOffsetY = 2;
      
      ctx.fillText('AI DLA ZIELONYCH', 700, 465);
      ctx.restore();
      

      
      // Confirmation text
      ctx.fillStyle = '#64748b';
      ctx.font = '22px Arial';
      ctx.fillText('Niniejszym poświadcza się, że', 700, 550);
      
      // Name with background box
      ctx.save();
      
      ctx.font = 'bold 36px Arial';
      const nameWidth = ctx.measureText(name.toUpperCase()).width + 60;
      
      const nameBoxGradient = ctx.createLinearGradient(0, 580, 0, 640);
      nameBoxGradient.addColorStop(0, '#f0fdf4');
      nameBoxGradient.addColorStop(1, '#dcfce7');
      ctx.fillStyle = nameBoxGradient;
      
      ctx.beginPath();
      ctx.roundRect(700 - nameWidth / 2, 580, nameWidth, 60, 10);
      ctx.fill();
      
      ctx.strokeStyle = '#10b981';
      ctx.lineWidth = 2;
      ctx.beginPath();
      ctx.roundRect(700 - nameWidth / 2, 580, nameWidth, 60, 10);
      ctx.stroke();
      
      ctx.fillStyle = '#065f46';
      ctx.fillText(name.toUpperCase(), 700, 622);
      ctx.restore();
      
      // Achievement description
      ctx.fillStyle = '#475569';
      ctx.font = '20px Arial';
      ctx.fillText('pomyślnie ukończył/ukończyła kurs podstaw sztucznej inteligencji', 700, 700);
      ctx.fillText('uzyskując wynik 100% w teście końcowym.', 700, 730);
      
      // Date only
      const currentDate = new Date().toLocaleDateString('pl-PL', {
        year: 'numeric',
        month: 'long',
        day: 'numeric'
      });
      
      ctx.fillStyle = '#64748b';
      ctx.font = '18px Arial';
      ctx.fillText(`${currentDate}`, 700, 820);
      
      // Unique certificate ID  
      const certificateId = 'AZ-' + Date.now().toString(36).toUpperCase();
      
      ctx.fillStyle = '#f8fafc';
      ctx.beginPath();
      ctx.roundRect(100, 900, 300, 30, 5);
      ctx.fill();
      
      ctx.fillStyle = '#64748b';
      ctx.font = '12px monospace';
      ctx.textAlign = 'left';
      ctx.fillText(`ID certyfikatu: ${certificateId}`, 100, 920);
      
      // Download certificate
      const link = document.createElement('a');
      link.download = `certyfikat-ai-dla-zielonych-${name.replace(/\s+/g, '-').toLowerCase()}.png`;
      link.href = canvas.toDataURL('image/png', 1.0);
      
      const generateBtn = document.getElementById('generate-certificate');
      if (generateBtn) {
        generateBtn.textContent = '⏳ Generowanie...';
        generateBtn.classList.add('opacity-50', 'cursor-not-allowed');
      }
      
      setTimeout(() => {
        link.click();
        
        if (generateBtn) {
          generateBtn.textContent = '✅ Certyfikat pobrany!';
          setTimeout(() => {
            generateBtn.textContent = '🏆 Wygeneruj certyfikat';
            generateBtn.classList.remove('opacity-50', 'cursor-not-allowed');
          }, 2000);
        }
      }, 500);
    }
    
    // Event listeners
    document.addEventListener('DOMContentLoaded', () => {
      initializeTest();
      
      const submitBtn = document.getElementById('submit-test');
      const retakeBtn = document.getElementById('retake-test');
      const retakeFailBtn = document.getElementById('retake-test-fail');
      const generateBtn = document.getElementById('generate-certificate');
      
      if (submitBtn) {
        submitBtn.addEventListener('click', showResults);
      }
      if (retakeBtn) {
        retakeBtn.addEventListener('click', resetTest);
      }
      if (retakeFailBtn) {
        retakeFailBtn.addEventListener('click', resetTest);
      }
      if (generateBtn) {
        generateBtn.addEventListener('click', generateCertificate);
      }
    });
  </script>
</Layout>
